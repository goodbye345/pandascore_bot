import requests
import time
import pandas as pd
from typing import List, Dict

def fetch_upcoming_matches(token: str) -> List[Dict]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ upcoming –º–∞—Ç—á–∏ —Å PandaScore API
    """
    base_url = "https://api.pandascore.co/matches/upcoming"
    headers = {
        "Authorization": f"Bearer {token}"
    }

    all_matches = []
    page_number = 1
    page_size = 100
    max_retries = 5
    base_timeout = 30

    while True:
        url = f"{base_url}?page[size]={page_size}&page[number]={page_number}"

        retries = 0
        retry_delay = 1

        while retries <= max_retries:
            try:
                print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}...")
                response = requests.get(url, headers=headers, timeout=base_timeout)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 Too Many Requests
                if response.status_code == 429:
                    retry_after = response.headers.get('Retry-After')
                    wait_time = int(retry_after) if retry_after else retry_delay
                    print(f"Rate limited. Waiting {wait_time} seconds...")
                    time.sleep(wait_time)
                    retry_delay *= 1.5
                    retries += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                response.raise_for_status()

                # –ü–∞—Ä—Å–∏–º JSON
                try:
                    data = response.json()
                except ValueError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}...")
                    raise

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, list):
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ —Å—Ä–∞–∑—É —Å–ø–∏—Å–∫–æ–º
                    if not data:
                        print(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}. –ó–∞–≤–µ—Ä—à–∞–µ–º.")
                        return all_matches
                    all_matches.extend(data)
                    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å–ø–∏—Å–æ–∫). –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(all_matches)}")
                elif isinstance(data, dict):
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'data': [...], ...}
                    if not data.get('data'):
                        print(f"–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page_number - 1}")
                        return all_matches
                    all_matches.extend(data['data'])
                    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(all_matches)}")
                else:
                    print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                    print(f"–î–∞–Ω–Ω—ã–µ: {str(data)[:200]}...")
                    return all_matches

                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Ä–µ—Ç—Ä–∞–µ–≤

            except requests.exceptions.Timeout:
                print(f"Timeout –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}, –ø–æ–ø—ã—Ç–∫–∞ {retries + 1}")
                if retries >= max_retries:
                    raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}")
                time.sleep(retry_delay)
                retry_delay *= 1.5
                retries += 1

            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}, –ø–æ–ø—ã—Ç–∫–∞ {retries + 1}: {e}")
                if retries >= max_retries:
                    raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}")
                time.sleep(retry_delay)
                retry_delay *= 1.5
                retries += 1

        page_number += 1

def main():
    # üî• –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù
    TOKEN = "juP7s96dZ35FXnPYRXp262pYP5CRQWQFckD4H3O5Glur5E7p3aE"

    try:
        print("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É upcoming –º–∞—Ç—á–µ–π...")
        matches = fetch_upcoming_matches(TOKEN)
        print(f"\n–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")

        if matches:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(matches)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print("\n–ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π:")
            columns_to_show = []
            if 'id' in df.columns:
                columns_to_show.append('id')
            if 'name' in df.columns:
                columns_to_show.append('name')
            if 'begin_at' in df.columns:
                columns_to_show.append('begin_at')

            if columns_to_show:
                print(df[columns_to_show].head())
            else:
                print(df.head())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV —Ñ–∞–π–ª
            df.to_csv('upcoming_matches.csv', index=False)
            print("\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: upcoming_matches.csv")
            print(f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} –∑–∞–ø–∏—Å–µ–π")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
            print(f"–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns[:10])}")

        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()